{"version":3,"sources":["../src/format.ts"],"sourcesContent":["/**\n * Capitalizes the first letter\n * @param str\n * @returns\n */\nexport const toCapitalized = (str: string = \"\"): string => {\n  if (!str.length) {\n    return \"\";\n  }\n\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const toKebabCase = (string: string): string =>\n  string\n    .replace(/([a-z])([A-Z])/g, \"$1-$2\")\n    .replace(/\\s+/g, \"-\")\n    .toLowerCase();\n\n/**\n * Transforms a camelCase or PascalCase string into a readable label.\n * E.g., \"camelCase\" → \"Camel Case\", \"PascalCase\" → \"Pascal Case\".\n */\nexport const toReadable = (str: string): string => {\n  return str\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between lowercase and uppercase\n    .replace(/([A-Z])([A-Z][a-z])/g, \"$1 $2\") // Handle consecutive uppercase letters\n    .replace(/_/g, \" \") // Replace underscores with spaces\n    .replace(/\\b\\w/g, (char) => char.toUpperCase()); // Capitalize the first letter of each word\n};\n"],"names":["toCapitalized","str","length","charAt","toUpperCase","slice","toKebabCase","string","replace","toLowerCase","toReadable","char"],"mappings":"AAAA;;;;CAIC,GACD,OAAO,MAAMA,gBAAgB,CAACC,MAAc,EAAE;IAC5C,IAAI,CAACA,IAAIC,MAAM,EAAE;QACf,OAAO;IACT;IAEA,OAAOD,IAAIE,MAAM,CAAC,GAAGC,WAAW,KAAKH,IAAII,KAAK,CAAC;AACjD,EAAE;AAEF,OAAO,MAAMC,cAAc,CAACC,SAC1BA,OACGC,OAAO,CAAC,mBAAmB,SAC3BA,OAAO,CAAC,QAAQ,KAChBC,WAAW,GAAG;AAEnB;;;CAGC,GACD,OAAO,MAAMC,aAAa,CAACT;IACzB,OAAOA,IACJO,OAAO,CAAC,mBAAmB,SAAS,4CAA4C;KAChFA,OAAO,CAAC,wBAAwB,SAAS,uCAAuC;KAChFA,OAAO,CAAC,MAAM,KAAK,kCAAkC;KACrDA,OAAO,CAAC,SAAS,CAACG,OAASA,KAAKP,WAAW,KAAK,2CAA2C;AAChG,EAAE"}