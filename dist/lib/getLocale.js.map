{"version":3,"sources":["../../src/lib/getLocale.ts"],"sourcesContent":["import type { SanitizedConfig } from \"payload\";\n\n/**\n * Extracts the type of locale codes dynamically from the Payload config.\n */\ntype ExtractLocaleCodes<T extends SanitizedConfig> = T[\"localization\"] extends {\n  localeCodes: readonly (infer L)[];\n}\n  ? L\n  : never;\n\n/**\n * Checks if a given locale is valid based on the available locale codes.\n * @param locale - The locale string to validate.\n * @param localeCodes - The list of valid locale codes.\n * @returns True if the locale is valid, otherwise false.\n */\nconst isLocale = <T extends string>(\n  locale: null | string | undefined,\n  localeCodes: readonly T[]\n): locale is T => {\n  return !!locale && localeCodes.includes(locale as T);\n};\n\n/**\n * Validates and returns the locale.\n * @param config - The Payload config object.\n * @param locale - The locale string to validate.\n * @returns The validated locale.\n */\nexport const getLocale = <T extends SanitizedConfig>(\n  config: T,\n  locale: null | string | undefined\n): ExtractLocaleCodes<T> => {\n  const { localization } = config;\n  if (!localization) {\n    throw new Error(`Localization is not supported by Payload`);\n  }\n\n  const { defaultLocale, localeCodes } = localization;\n\n  if (isLocale(locale, localeCodes)) {\n    return locale as ExtractLocaleCodes<T>;\n  }\n\n  return defaultLocale as ExtractLocaleCodes<T>;\n};\n"],"names":["isLocale","locale","localeCodes","includes","getLocale","config","localization","Error","defaultLocale"],"mappings":"AAWA;;;;;CAKC,GACD,MAAMA,WAAW,CACfC,QACAC;IAEA,OAAO,CAAC,CAACD,UAAUC,YAAYC,QAAQ,CAACF;AAC1C;AAEA;;;;;CAKC,GACD,OAAO,MAAMG,YAAY,CACvBC,QACAJ;IAEA,MAAM,EAAEK,YAAY,EAAE,GAAGD;IACzB,IAAI,CAACC,cAAc;QACjB,MAAM,IAAIC,MAAM,CAAC,wCAAwC,CAAC;IAC5D;IAEA,MAAM,EAAEC,aAAa,EAAEN,WAAW,EAAE,GAAGI;IAEvC,IAAIN,SAASC,QAAQC,cAAc;QACjC,OAAOD;IACT;IAEA,OAAOO;AACT,EAAE"}