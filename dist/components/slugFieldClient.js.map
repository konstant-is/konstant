{"version":3,"sources":["../../src/components/slugFieldClient.tsx"],"sourcesContent":["import type { TextFieldClientProps } from \"payload\";\n\nimport {\n  Button,\n  FieldLabel,\n  TextInput,\n  useField,\n  useForm,\n  useFormFields,\n} from \"@payloadcms/ui\";\nimport React, { useCallback, useMemo } from \"react\";\n\nimport type { SlugifyOptions } from \"../fields/slug/types.js\";\n\nimport { cx } from \"../lib/cx.js\";\nimport { generateSlug } from \"../fields/slug/helpers.js\";\nimport css from \"./slugField.module.css\";\n\ntype Props = {\n  custom: {\n    autoIncrementSlug?: boolean;\n    checkboxFieldPath: string;\n    slugifyOptions: { remove: string } & Omit<SlugifyOptions, \"remove\">;\n    watchFields: string[];\n  };\n} & TextFieldClientProps;\n\nexport const SlugFieldClient: React.FC<Props> = (props) => {\n  console.log(\"SlugFieldClient props:\", props);\n  const {\n    custom = {} as Props[\"custom\"],\n    field,\n    path,\n    readOnly: readOnlyFromProps,\n  } = props;\n\n  const { label } = field;\n  const {\n    autoIncrementSlug,\n    checkboxFieldPath: checkboxFieldPathFromProps,\n    slugifyOptions,\n    watchFields,\n  } = custom || {};\n\n  const checkboxFieldPath = path?.includes(\".\")\n    ? `${path}.${checkboxFieldPathFromProps}`\n    : checkboxFieldPathFromProps;\n\n  const { setValue, value } = useField<string>({ path: path || field.name });\n\n  const { dispatchFields } = useForm();\n\n  // The value of the checkbox\n  // We're using separate useFormFields to minimise re-renders\n  const checkboxValue = useFormFields(([fields]) => {\n    return fields[checkboxFieldPath]?.value as string;\n  });\n\n  const fields = useFormFields(([fields]) => {\n    return watchFields.map((watch) => fields[watch]);\n  });\n\n  const processedValue = useMemo(() => {\n    const slug = generateSlug(fields, slugifyOptions);\n\n    if (value !== slug && autoIncrementSlug === true) {\n      return value;\n    }\n\n    return slug;\n  }, [fields, slugifyOptions, value, autoIncrementSlug]);\n\n  React.useEffect(() => {\n    if (checkboxValue) {\n      if (processedValue !== value) {\n        setValue(processedValue);\n      }\n    }\n  }, [setValue, checkboxValue, processedValue, value]);\n\n  const handleLock = useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n\n      dispatchFields({\n        type: \"UPDATE\",\n        path: checkboxFieldPath,\n        value: !checkboxValue,\n      });\n    },\n    [checkboxValue, checkboxFieldPath, dispatchFields]\n  );\n\n  const readOnly = readOnlyFromProps || checkboxValue;\n\n  return (\n    <div className={cx(\"field-type\", css.ctr)}>\n      <div className={cx(css.label_wrapper)}>\n        <FieldLabel\n          hideLocale={false}\n          htmlFor={`field-${path}`}\n          label={label}\n          localized={true}\n          required={field.required}\n        />\n\n        <Button\n          buttonStyle=\"none\"\n          className={cx(css.lock_button)}\n          onClick={handleLock}\n        >\n          {checkboxValue ? \"Unlock\" : \"Lock\"}\n        </Button>\n      </div>\n\n      <TextInput\n        onChange={setValue}\n        path={path || field.name}\n        readOnly={Boolean(readOnly)}\n        value={value}\n      />\n    </div>\n  );\n};\n"],"names":["Button","FieldLabel","TextInput","useField","useForm","useFormFields","React","useCallback","useMemo","cx","generateSlug","css","SlugFieldClient","props","console","log","custom","field","path","readOnly","readOnlyFromProps","label","autoIncrementSlug","checkboxFieldPath","checkboxFieldPathFromProps","slugifyOptions","watchFields","includes","setValue","value","name","dispatchFields","checkboxValue","fields","map","watch","processedValue","slug","useEffect","handleLock","e","preventDefault","type","div","className","ctr","label_wrapper","hideLocale","htmlFor","localized","required","buttonStyle","lock_button","onClick","onChange","Boolean"],"mappings":";AAEA,SACEA,MAAM,EACNC,UAAU,EACVC,SAAS,EACTC,QAAQ,EACRC,OAAO,EACPC,aAAa,QACR,iBAAiB;AACxB,OAAOC,SAASC,WAAW,EAAEC,OAAO,QAAQ,QAAQ;AAIpD,SAASC,EAAE,QAAQ,eAAe;AAClC,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAOC,SAAS,yBAAyB;AAWzC,OAAO,MAAMC,kBAAmC,CAACC;IAC/CC,QAAQC,GAAG,CAAC,0BAA0BF;IACtC,MAAM,EACJG,SAAS,CAAC,CAAoB,EAC9BC,KAAK,EACLC,IAAI,EACJC,UAAUC,iBAAiB,EAC5B,GAAGP;IAEJ,MAAM,EAAEQ,KAAK,EAAE,GAAGJ;IAClB,MAAM,EACJK,iBAAiB,EACjBC,mBAAmBC,0BAA0B,EAC7CC,cAAc,EACdC,WAAW,EACZ,GAAGV,UAAU,CAAC;IAEf,MAAMO,oBAAoBL,MAAMS,SAAS,OACrC,GAAGT,KAAK,CAAC,EAAEM,4BAA4B,GACvCA;IAEJ,MAAM,EAAEI,QAAQ,EAAEC,KAAK,EAAE,GAAG1B,SAAiB;QAAEe,MAAMA,QAAQD,MAAMa,IAAI;IAAC;IAExE,MAAM,EAAEC,cAAc,EAAE,GAAG3B;IAE3B,4BAA4B;IAC5B,4DAA4D;IAC5D,MAAM4B,gBAAgB3B,cAAc,CAAC,CAAC4B,OAAO;QAC3C,OAAOA,MAAM,CAACV,kBAAkB,EAAEM;IACpC;IAEA,MAAMI,SAAS5B,cAAc,CAAC,CAAC4B,OAAO;QACpC,OAAOP,YAAYQ,GAAG,CAAC,CAACC,QAAUF,MAAM,CAACE,MAAM;IACjD;IAEA,MAAMC,iBAAiB5B,QAAQ;QAC7B,MAAM6B,OAAO3B,aAAauB,QAAQR;QAElC,IAAII,UAAUQ,QAAQf,sBAAsB,MAAM;YAChD,OAAOO;QACT;QAEA,OAAOQ;IACT,GAAG;QAACJ;QAAQR;QAAgBI;QAAOP;KAAkB;IAErDhB,MAAMgC,SAAS,CAAC;QACd,IAAIN,eAAe;YACjB,IAAII,mBAAmBP,OAAO;gBAC5BD,SAASQ;YACX;QACF;IACF,GAAG;QAACR;QAAUI;QAAeI;QAAgBP;KAAM;IAEnD,MAAMU,aAAahC,YACjB,CAACiC;QACCA,EAAEC,cAAc;QAEhBV,eAAe;YACbW,MAAM;YACNxB,MAAMK;YACNM,OAAO,CAACG;QACV;IACF,GACA;QAACA;QAAeT;QAAmBQ;KAAe;IAGpD,MAAMZ,WAAWC,qBAAqBY;IAEtC,qBACE,MAACW;QAAIC,WAAWnC,GAAG,cAAcE,IAAIkC,GAAG;;0BACtC,MAACF;gBAAIC,WAAWnC,GAAGE,IAAImC,aAAa;;kCAClC,KAAC7C;wBACC8C,YAAY;wBACZC,SAAS,CAAC,MAAM,EAAE9B,MAAM;wBACxBG,OAAOA;wBACP4B,WAAW;wBACXC,UAAUjC,MAAMiC,QAAQ;;kCAG1B,KAAClD;wBACCmD,aAAY;wBACZP,WAAWnC,GAAGE,IAAIyC,WAAW;wBAC7BC,SAASd;kCAERP,gBAAgB,WAAW;;;;0BAIhC,KAAC9B;gBACCoD,UAAU1B;gBACVV,MAAMA,QAAQD,MAAMa,IAAI;gBACxBX,UAAUoC,QAAQpC;gBAClBU,OAAOA;;;;AAIf,EAAE"}