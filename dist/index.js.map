{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { CollectionConfig, Config } from \"payload\";\n\nimport { nestedDocsPlugin } from \"@payloadcms/plugin-nested-docs\";\n\nimport type { NavigationPluginConfig } from \"./types.js\";\nimport type { PluginContext } from \"./utils/createPluginContext.js\";\n\nimport {\n  resolveLocalizedSlugs,\n  resolveLocalizedUrl,\n  resolveUrl,\n} from \"./hooks/index.js\";\nimport { createPluginContext } from \"./utils/createPluginContext.js\";\nimport { enhanceFields } from \"./utils/enhanceFields.js\";\nimport { getLocales } from \"./utils/getLocals.js\";\nimport { mergeHooks } from \"./utils/mergeHooks.js\";\n\nexport const navigationPlugin =\n  (navigationConfig: NavigationPluginConfig) =>\n  async (config: Config): Promise<Config> => {\n    if (navigationConfig.disabled) {\n      return config;\n    }\n    const locales = getLocales(config);\n    let enhancedConfig = config;\n\n    if (navigationConfig.nestedDocsPlugin) {\n      // Integrate nestedDocsPlugin and await its result\n      enhancedConfig = await nestedDocsPlugin({\n        collections: navigationConfig.collections,\n        ...navigationConfig.nestedDocsPlugin,\n      })(enhancedConfig);\n    }\n\n    const pluginConfig = createPluginContext(navigationConfig, locales);\n\n    return {\n      ...config,\n      collections: (enhancedConfig.collections || []).map((c) =>\n        createCollection(pluginConfig, c)\n      ),\n    };\n  };\n\nconst createCollection = (\n  context: PluginContext,\n  collection: CollectionConfig\n) => {\n  if (!context.collections.includes(collection.slug)) {\n    return collection; // Skip collections not included in the plugin config\n  }\n\n  // Enhance fields\n  const fields = enhanceFields({\n    context,\n    fields: collection.fields,\n  });\n\n  return {\n    ...collection,\n    fields,\n    hooks: {\n      ...(collection.hooks || {}),\n      beforeChange: mergeHooks(\n        [\n          resolveUrl(context),\n          resolveLocalizedUrl(context),\n          resolveLocalizedSlugs(context),\n        ],\n        collection.hooks?.beforeChange\n      ),\n    },\n  };\n};\n"],"names":["nestedDocsPlugin","resolveLocalizedSlugs","resolveLocalizedUrl","resolveUrl","createPluginContext","enhanceFields","getLocales","mergeHooks","navigationPlugin","navigationConfig","config","disabled","locales","enhancedConfig","collections","pluginConfig","map","c","createCollection","context","collection","includes","slug","fields","hooks","beforeChange"],"mappings":"AAEA,SAASA,gBAAgB,QAAQ,iCAAiC;AAKlE,SACEC,qBAAqB,EACrBC,mBAAmB,EACnBC,UAAU,QACL,mBAAmB;AAC1B,SAASC,mBAAmB,QAAQ,iCAAiC;AACrE,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,UAAU,QAAQ,wBAAwB;AAEnD,OAAO,MAAMC,mBACX,CAACC,mBACD,OAAOC;QACL,IAAID,iBAAiBE,QAAQ,EAAE;YAC7B,OAAOD;QACT;QACA,MAAME,UAAUN,WAAWI;QAC3B,IAAIG,iBAAiBH;QAErB,IAAID,iBAAiBT,gBAAgB,EAAE;YACrC,kDAAkD;YAClDa,iBAAiB,MAAMb,iBAAiB;gBACtCc,aAAaL,iBAAiBK,WAAW;gBACzC,GAAGL,iBAAiBT,gBAAgB;YACtC,GAAGa;QACL;QAEA,MAAME,eAAeX,oBAAoBK,kBAAkBG;QAE3D,OAAO;YACL,GAAGF,MAAM;YACTI,aAAa,AAACD,CAAAA,eAAeC,WAAW,IAAI,EAAE,AAAD,EAAGE,GAAG,CAAC,CAACC,IACnDC,iBAAiBH,cAAcE;QAEnC;IACF,EAAE;AAEJ,MAAMC,mBAAmB,CACvBC,SACAC;IAEA,IAAI,CAACD,QAAQL,WAAW,CAACO,QAAQ,CAACD,WAAWE,IAAI,GAAG;QAClD,OAAOF,YAAY,qDAAqD;IAC1E;IAEA,iBAAiB;IACjB,MAAMG,SAASlB,cAAc;QAC3Bc;QACAI,QAAQH,WAAWG,MAAM;IAC3B;IAEA,OAAO;QACL,GAAGH,UAAU;QACbG;QACAC,OAAO;YACL,GAAIJ,WAAWI,KAAK,IAAI,CAAC,CAAC;YAC1BC,cAAclB,WACZ;gBACEJ,WAAWgB;gBACXjB,oBAAoBiB;gBACpBlB,sBAAsBkB;aACvB,EACDC,WAAWI,KAAK,EAAEC;QAEtB;IACF;AACF"}