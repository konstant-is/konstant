{"version":3,"sources":["../../../src/fields/slug/slugField.ts"],"sourcesContent":["import { CheckboxField, Field, TextField } from \"payload\";\nimport { FieldHook } from \"payload\";\nimport { SlugFieldConfig } from \"./types.js\";\nimport {\n  defaultSlugify,\n  generateSlug,\n  normalizeSlugOptions,\n} from \"./helpers.js\";\nimport { getLibPath } from \"../../lib/getLibPath.js\";\n\nconst validateSlug =\n  (config: SlugFieldConfig): FieldHook =>\n  ({ data, req, siblingData, value }) => {\n    // If the slug is locked, return the existing value\n    if (!siblingData[config.lockFieldName]) {\n      return value;\n    }\n\n    const missingFields: string[] = [];\n\n    // Collect values of the fields used for slug generation\n    const fields = config.useFields.map((field) => {\n      const fieldValue = data?.[field] || null;\n\n      if (!fieldValue) {\n        missingFields.push(field); // Track missing fields\n      }\n\n      return fieldValue;\n    });\n\n    // If any required fields are missing, log and return the original value\n    if (missingFields.length > 0) {\n      req.payload.logger.warn(\n        \"Missing fields for slug generation:\",\n        missingFields\n      );\n      return value;\n    }\n\n    // Generate the slug using slugify\n    const processedSlug = generateSlug(fields, config.slugifyOptions);\n    return processedSlug;\n  };\n\nconst uniqueSlug =\n  (config: SlugFieldConfig): FieldHook =>\n  async ({ collection, data, req, value }) => {\n    // Try to get the ID of the current document\n    const currentDocId = req.routeParams?.id || data?.id; // From URL params (usually for update) // From the data being passed (useful for beforeChange hooks)\n\n    let slug = value;\n    let suffix = 1;\n\n    // Skip if autoIncrementSlug is disabled or there's no collection or slug is empty\n    if (config.autoIncrementSlug == false || !collection?.slug || !slug) {\n      return value;\n    }\n\n    while (true) {\n      const conflictingDocs = await req.payload\n        .find({\n          collection: collection.slug,\n          where: {\n            slug: { equals: slug },\n          },\n        })\n        .then((result) => result.docs.filter((doc) => doc.id !== currentDocId));\n\n      if (conflictingDocs.length === 0) {\n        return slug; // If unique, return the slug\n      }\n\n      // Append suffix and increment if conflicts exist\n      slug = `${value}-${suffix}`;\n      suffix++;\n    }\n  };\n\ntype SlugFieldProps = Partial<SlugFieldConfig> & {\n  useFields: string[];\n};\n\nexport const slugField = (props: SlugFieldProps): Field[] => {\n  const config: SlugFieldConfig = {\n    fieldName: \"slug\",\n    lockFieldName: \"slugLock\",\n    slugifyOptions: defaultSlugify,\n    autoIncrementSlug: true,\n    ...props,\n  };\n\n  const checkBoxField: CheckboxField = {\n    name: \"slugLock\",\n    type: \"checkbox\",\n    defaultValue: true,\n\n    admin: {\n      hidden: true,\n      position: \"sidebar\",\n    },\n  };\n\n  const slugField: TextField = {\n    name: \"slug\",\n    type: \"text\",\n    admin: {\n      components: {\n        Field: {\n          clientProps: {\n            custom: {\n              autoIncrementSlug: config.autoIncrementSlug,\n              checkboxFieldPath: checkBoxField.name,\n              slugifyOptions: normalizeSlugOptions(config.slugifyOptions),\n              watchFields: config.useFields,\n            },\n          },\n          path: getLibPath(\"client\", \"#SlugFieldClient\"),\n        },\n      },\n      position: \"sidebar\",\n    },\n    hooks: {\n      beforeChange: [uniqueSlug(config)],\n      beforeValidate: [validateSlug(config)],\n    },\n    index: true,\n    localized: true,\n    required: true,\n    unique: true,\n  };\n\n  return [slugField, checkBoxField];\n};\n"],"names":["defaultSlugify","generateSlug","normalizeSlugOptions","getLibPath","validateSlug","config","data","req","siblingData","value","lockFieldName","missingFields","fields","useFields","map","field","fieldValue","push","length","payload","logger","warn","processedSlug","slugifyOptions","uniqueSlug","collection","currentDocId","routeParams","id","slug","suffix","autoIncrementSlug","conflictingDocs","find","where","equals","then","result","docs","filter","doc","slugField","props","fieldName","checkBoxField","name","type","defaultValue","admin","hidden","position","components","Field","clientProps","custom","checkboxFieldPath","watchFields","path","hooks","beforeChange","beforeValidate","index","localized","required","unique"],"mappings":"AAGA,SACEA,cAAc,EACdC,YAAY,EACZC,oBAAoB,QACf,eAAe;AACtB,SAASC,UAAU,QAAQ,0BAA0B;AAErD,MAAMC,eACJ,CAACC,SACD,CAAC,EAAEC,IAAI,EAAEC,GAAG,EAAEC,WAAW,EAAEC,KAAK,EAAE;QAChC,mDAAmD;QACnD,IAAI,CAACD,WAAW,CAACH,OAAOK,aAAa,CAAC,EAAE;YACtC,OAAOD;QACT;QAEA,MAAME,gBAA0B,EAAE;QAElC,wDAAwD;QACxD,MAAMC,SAASP,OAAOQ,SAAS,CAACC,GAAG,CAAC,CAACC;YACnC,MAAMC,aAAaV,MAAM,CAACS,MAAM,IAAI;YAEpC,IAAI,CAACC,YAAY;gBACfL,cAAcM,IAAI,CAACF,QAAQ,uBAAuB;YACpD;YAEA,OAAOC;QACT;QAEA,wEAAwE;QACxE,IAAIL,cAAcO,MAAM,GAAG,GAAG;YAC5BX,IAAIY,OAAO,CAACC,MAAM,CAACC,IAAI,CACrB,uCACAV;YAEF,OAAOF;QACT;QAEA,kCAAkC;QAClC,MAAMa,gBAAgBrB,aAAaW,QAAQP,OAAOkB,cAAc;QAChE,OAAOD;IACT;AAEF,MAAME,aACJ,CAACnB,SACD,OAAO,EAAEoB,UAAU,EAAEnB,IAAI,EAAEC,GAAG,EAAEE,KAAK,EAAE;QACrC,4CAA4C;QAC5C,MAAMiB,eAAenB,IAAIoB,WAAW,EAAEC,MAAMtB,MAAMsB,IAAI,qGAAqG;QAE3J,IAAIC,OAAOpB;QACX,IAAIqB,SAAS;QAEb,kFAAkF;QAClF,IAAIzB,OAAO0B,iBAAiB,IAAI,SAAS,CAACN,YAAYI,QAAQ,CAACA,MAAM;YACnE,OAAOpB;QACT;QAEA,MAAO,KAAM;YACX,MAAMuB,kBAAkB,MAAMzB,IAAIY,OAAO,CACtCc,IAAI,CAAC;gBACJR,YAAYA,WAAWI,IAAI;gBAC3BK,OAAO;oBACLL,MAAM;wBAAEM,QAAQN;oBAAK;gBACvB;YACF,GACCO,IAAI,CAAC,CAACC,SAAWA,OAAOC,IAAI,CAACC,MAAM,CAAC,CAACC,MAAQA,IAAIZ,EAAE,KAAKF;YAE3D,IAAIM,gBAAgBd,MAAM,KAAK,GAAG;gBAChC,OAAOW,MAAM,6BAA6B;YAC5C;YAEA,iDAAiD;YACjDA,OAAO,GAAGpB,MAAM,CAAC,EAAEqB,QAAQ;YAC3BA;QACF;IACF;AAMF,OAAO,MAAMW,YAAY,CAACC;IACxB,MAAMrC,SAA0B;QAC9BsC,WAAW;QACXjC,eAAe;QACfa,gBAAgBvB;QAChB+B,mBAAmB;QACnB,GAAGW,KAAK;IACV;IAEA,MAAME,gBAA+B;QACnCC,MAAM;QACNC,MAAM;QACNC,cAAc;QAEdC,OAAO;YACLC,QAAQ;YACRC,UAAU;QACZ;IACF;IAEA,MAAMT,YAAuB;QAC3BI,MAAM;QACNC,MAAM;QACNE,OAAO;YACLG,YAAY;gBACVC,OAAO;oBACLC,aAAa;wBACXC,QAAQ;4BACNvB,mBAAmB1B,OAAO0B,iBAAiB;4BAC3CwB,mBAAmBX,cAAcC,IAAI;4BACrCtB,gBAAgBrB,qBAAqBG,OAAOkB,cAAc;4BAC1DiC,aAAanD,OAAOQ,SAAS;wBAC/B;oBACF;oBACA4C,MAAMtD,WAAW,UAAU;gBAC7B;YACF;YACA+C,UAAU;QACZ;QACAQ,OAAO;YACLC,cAAc;gBAACnC,WAAWnB;aAAQ;YAClCuD,gBAAgB;gBAACxD,aAAaC;aAAQ;QACxC;QACAwD,OAAO;QACPC,WAAW;QACXC,UAAU;QACVC,QAAQ;IACV;IAEA,OAAO;QAACvB;QAAWG;KAAc;AACnC,EAAE"}