{"version":3,"sources":["../../../src/fields/slug/helpers.ts"],"sourcesContent":["/**\n * Hack to make 'slugify' import work with \"type\": \"module\".\n */\nimport s from \"slugify\";\n\nimport type { SlugifyOptions } from \"./types.js\";\n\n// Fallback for CommonJS or ESM default export\nexport const slugify = s.default || s;\n\n// Type with flexible `remove` property\ntype SlugifyOptionsWithRemove = {\n  remove?: RegExp | string;\n} & Omit<SlugifyOptions, \"remove\">;\n\nexport const defaultSlugify: Required<SlugifyOptions> = {\n  locale: \"en\",\n  lower: true,\n  remove: /[*+~.()'\"!:@]/g,\n  replacement: \"-\",\n  strict: false,\n  trim: true,\n};\n/**\n * Convert a string representation of a RegExp (e.g., `/pattern/flags`) into a RegExp object.\n * @param regexString - The string representation of a RegExp.\n * @returns The RegExp object.\n */\nconst stringToRegex = (regexString: string): RegExp => {\n  const pattern = regexString.replace(/^\\/|\\/[gimsuy]*$/g, \"\"); // Strip leading/trailing slashes and flags\n  const flags = regexString.match(/\\/([gimsuy]*)$/)?.[1] || \"\"; // Extract flags (if any)\n  return new RegExp(pattern, flags);\n};\n\n/**\n * Merge user-provided slugify options with default values.\n * @param opts - The user-provided slugify options.\n * @returns The merged options.\n */\nconst getOptions = (\n  opts: SlugifyOptionsWithRemove\n): Required<SlugifyOptions> => {\n  const remove =\n    typeof opts.remove === \"string\" ? stringToRegex(opts.remove) : opts.remove;\n\n  return {\n    ...defaultSlugify,\n    ...opts,\n    remove: remove || defaultSlugify.remove,\n  };\n};\n\n/**\n * Generate a slug from an array of fields.\n * @param fields - The fields to generate the slug from.\n * @param slugifyOptions - Options for customizing slug generation.\n * @returns The generated slug.\n */\nexport const generateSlug = (\n  fields: Array<{ value?: unknown } | null | string | undefined>,\n  slugifyOptions: SlugifyOptionsWithRemove = defaultSlugify\n): string => {\n  const options = getOptions(slugifyOptions);\n\n  return fields\n    .filter((item) =>\n      Boolean(item && (typeof item === \"string\" || item?.value))\n    ) // Filter null/undefined\n    .map((item) =>\n      slugify(typeof item === \"string\" ? item : String(item?.value), options)\n    )\n    .join(options.replacement); // Join the slugified parts\n};\n\n/**\n * Normalize slugify options by converting `remove` to a string representation.\n * @param options - The slugify options to normalize.\n * @returns The normalized options.\n */\nexport const normalizeSlugOptions = (\n  options: SlugifyOptions = defaultSlugify\n): SlugifyOptionsWithRemove => {\n  const { remove, ...rest } = options;\n  return { ...rest, remove: `${remove}` };\n};\n"],"names":["s","slugify","default","defaultSlugify","locale","lower","remove","replacement","strict","trim","stringToRegex","regexString","pattern","replace","flags","match","RegExp","getOptions","opts","generateSlug","fields","slugifyOptions","options","filter","item","Boolean","value","map","String","join","normalizeSlugOptions","rest"],"mappings":"AAAA;;CAEC,GACD,OAAOA,OAAO,UAAU;AAIxB,8CAA8C;AAC9C,OAAO,MAAMC,UAAUD,EAAEE,OAAO,IAAIF,EAAE;AAOtC,OAAO,MAAMG,iBAA2C;IACtDC,QAAQ;IACRC,OAAO;IACPC,QAAQ;IACRC,aAAa;IACbC,QAAQ;IACRC,MAAM;AACR,EAAE;AACF;;;;CAIC,GACD,MAAMC,gBAAgB,CAACC;IACrB,MAAMC,UAAUD,YAAYE,OAAO,CAAC,qBAAqB,KAAK,2CAA2C;IACzG,MAAMC,QAAQH,YAAYI,KAAK,CAAC,mBAAmB,CAAC,EAAE,IAAI,IAAI,yBAAyB;IACvF,OAAO,IAAIC,OAAOJ,SAASE;AAC7B;AAEA;;;;CAIC,GACD,MAAMG,aAAa,CACjBC;IAEA,MAAMZ,SACJ,OAAOY,KAAKZ,MAAM,KAAK,WAAWI,cAAcQ,KAAKZ,MAAM,IAAIY,KAAKZ,MAAM;IAE5E,OAAO;QACL,GAAGH,cAAc;QACjB,GAAGe,IAAI;QACPZ,QAAQA,UAAUH,eAAeG,MAAM;IACzC;AACF;AAEA;;;;;CAKC,GACD,OAAO,MAAMa,eAAe,CAC1BC,QACAC,iBAA2ClB,cAAc;IAEzD,MAAMmB,UAAUL,WAAWI;IAE3B,OAAOD,OACJG,MAAM,CAAC,CAACC,OACPC,QAAQD,QAAS,CAAA,OAAOA,SAAS,YAAYA,MAAME,KAAI,IACvD,wBAAwB;KACzBC,GAAG,CAAC,CAACH,OACJvB,QAAQ,OAAOuB,SAAS,WAAWA,OAAOI,OAAOJ,MAAME,QAAQJ,UAEhEO,IAAI,CAACP,QAAQf,WAAW,GAAG,2BAA2B;AAC3D,EAAE;AAEF;;;;CAIC,GACD,OAAO,MAAMuB,uBAAuB,CAClCR,UAA0BnB,cAAc;IAExC,MAAM,EAAEG,MAAM,EAAE,GAAGyB,MAAM,GAAGT;IAC5B,OAAO;QAAE,GAAGS,IAAI;QAAEzB,QAAQ,GAAGA,QAAQ;IAAC;AACxC,EAAE"}